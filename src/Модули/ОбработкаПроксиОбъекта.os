#Использовать reflector

Перем Рефлектор;

// Получает тип объекта, вокруг которого построен прокси-объект (рекурсивно).
//
// Параметры:
//   Прокси - Произвольный - Объект, у которого нужно найти исходный тип объекта
//
//  Возвращаемое значение:
//   Тип - Исходный тип объекта
//
Функция ИсходныйТип(Прокси) Экспорт
	Рефлектор = Новый Рефлектор();
	
	Попытка
		ИсходныйОбъект = Рефлектор.ПолучитьСвойство(Прокси, Константы_Прокси.Поле_ИнстансОбъекта);
		Возврат ИсходныйТип(ИсходныйОбъект);
	Исключение
		Возврат ТипЗнч(Прокси);
	КонецПопытки;
	
КонецФункции

// Синхронизировать значения экспортных полей двух объектов.
//
// Параметры:
//   ИсходныйОбъект - Произвольный - Источник значений свойств
//   Потребитель - Произвольный - Получатель значений свойств
//
Процедура СинхронизироватьПоля(ИсходныйОбъект, Потребитель) Экспорт
	СвойстваИсходногоОбъекта = Новый РефлекторОбъекта(ИсходныйОбъект).ПолучитьТаблицуСвойств();
	РефлекторПотребителя = Новый РефлекторОбъекта(Потребитель);
	
	Для Каждого Свойство Из СвойстваИсходногоОбъекта Цикл
		ИмяСвойства = Свойство.Имя;
		
		Если НЕ РефлекторПотребителя.ЕстьСвойство(ИмяСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеСвойства = Рефлектор.ПолучитьСвойство(ИсходныйОбъект, ИмяСвойства);
		Рефлектор.УстановитьСвойство(Потребитель, ИмяСвойства, ЗначениеСвойства);
	КонецЦикла;
КонецПроцедуры

#Область Инициализация

Рефлектор = Новый Рефлектор();

#КонецОбласти
